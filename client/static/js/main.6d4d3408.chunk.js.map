{"version":3,"sources":["ColorModeSwitcher.tsx","App.tsx","reportWebVitals.ts","serviceWorker.ts","index.tsx"],"names":["ColorModeSwitcher","props","toggleColorMode","useColorMode","text","useColorModeValue","SwitchIcon","FaMoon","FaSun","size","fontSize","variant","color","marginLeft","onClick","icon","App","React","code","setCode","longUrl","setLongUrl","loading","setLoading","success","setSuccess","a","toast","promise","axios","post","window","location","origin","replace","error","err","message","response","data","Array","isArray","finally","theme","position","reverseOrder","textAlign","minH","p","justifySelf","spacing","mb","borderColor","w","value","onChange","e","target","host","bg","_hover","_focus","_active","isLoading","ml","navigator","clipboard","writeText","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Boolean","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.6d4d3408.chunk.js","sourcesContent":["import * as React from 'react';\nimport {\n  useColorMode,\n  useColorModeValue,\n  IconButton,\n  IconButtonProps,\n} from '@chakra-ui/react';\nimport { FaMoon, FaSun } from 'react-icons/fa';\n\ntype ColorModeSwitcherProps = Omit<IconButtonProps, 'aria-label'>;\n\nexport const ColorModeSwitcher: React.FC<ColorModeSwitcherProps> = (props) => {\n  const { toggleColorMode } = useColorMode();\n  const text = useColorModeValue('dark', 'light');\n  const SwitchIcon = useColorModeValue(FaMoon, FaSun);\n\n  return (\n    <IconButton\n      size=\"md\"\n      fontSize=\"lg\"\n      variant=\"ghost\"\n      color=\"current\"\n      marginLeft=\"2\"\n      onClick={toggleColorMode}\n      icon={<SwitchIcon />}\n      aria-label={`Switch to ${text} mode`}\n      {...props}\n    />\n  );\n};\n","import * as React from 'react';\nimport {\n  ChakraProvider,\n  Box,\n  Text,\n  VStack,\n  Grid,\n  theme,\n  Input,\n  Button,\n  Flex,\n} from '@chakra-ui/react';\nimport { ColorModeSwitcher } from './ColorModeSwitcher';\nimport axios from 'axios';\nimport toast, { Toaster } from 'react-hot-toast';\n\nexport const App = () => {\n  const [code, setCode] = React.useState('');\n  const [longUrl, setLongUrl] = React.useState('');\n  const [loading, setLoading] = React.useState(false);\n  const [success, setSuccess] = React.useState(false);\n\n  const onClick = async () => {\n    setLoading(true);\n    toast\n      .promise(\n        axios.post(window.location.origin + '/urls/shortener', {\n          code: code.replace(/\\s+/g, '-'),\n          longUrl,\n        }),\n        {\n          success: () => {\n            setSuccess(true);\n            return 'Short url created successfully';\n          },\n          error: (err) => {\n            setSuccess(false);\n            const message = err.response.data.message;\n            return Array.isArray(message) ? message[0] : message;\n          },\n          loading: 'Creating short url...',\n        }\n      )\n      .finally(() => setLoading(false));\n  };\n\n  const copyToClipboard = () => {\n    navigator.clipboard.writeText(\n      `${window.location.host}/${code.replace(/\\s+/g, '-')}`\n    );\n    toast.success('Copied to clipboard');\n  };\n\n  return (\n    <ChakraProvider theme={theme}>\n      <Toaster position=\"top-center\" reverseOrder={false} />\n      <Box textAlign=\"center\" fontSize=\"xl\">\n        <Grid minH=\"100vh\" p={3}>\n          <ColorModeSwitcher justifySelf=\"flex-end\" />\n          <VStack spacing={8}>\n            {/* <Logo h=\"40vmin\" pointerEvents=\"none\" /> */}\n            <Box>\n              <Text mb=\".5rem\">Masukkan Long Url:</Text>\n              <Input\n                borderColor=\"#A5CD37\"\n                w=\"20rem\"\n                value={longUrl}\n                onChange={(e) => setLongUrl(e.target.value)}\n              />\n            </Box>\n            <Box>\n              <Text mb=\".5rem\">Masukkan Url Code:</Text>\n              <Input\n                borderColor=\"#A5CD37\"\n                w=\"20rem\"\n                value={code}\n                onChange={(e) => setCode(e.target.value)}\n              />\n            </Box>\n            <Box>\n              <Text mb=\".5rem\">Result:</Text>\n              <Text>{`${window.location.host}/${code.replace(\n                /\\s+/g,\n                '-'\n              )}`}</Text>\n            </Box>\n            <Flex>\n              <Button\n                bg=\"#A5CD37\"\n                _hover={{}}\n                _focus={{}}\n                _active={{}}\n                onClick={onClick}\n                isLoading={loading}\n              >\n                Generate\n              </Button>\n              {success && (\n                <Button\n                  bg=\"#7BBACF\"\n                  ml=\"1rem\"\n                  _hover={{}}\n                  _focus={{}}\n                  _active={{}}\n                  onClick={copyToClipboard}\n                >\n                  Copy To Clipboard\n                </Button>\n              )}\n            </Flex>\n          </VStack>\n        </Grid>\n      </Box>\n    </ChakraProvider>\n  );\n};\n","import { ReportHandler } from \"web-vitals\"\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://cra.link/PWA\",\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://cra.link/PWA.\",\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It is the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\")\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\")\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\",\n      )\n    })\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister()\n      })\n      .catch((error) => {\n        console.error(error.message)\n      })\n  }\n}\n","import { ColorModeScript } from \"@chakra-ui/react\"\nimport * as React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport { App } from \"./App\"\nimport reportWebVitals from \"./reportWebVitals\"\nimport * as serviceWorker from \"./serviceWorker\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <ColorModeScript />\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\"),\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorker.unregister()\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}